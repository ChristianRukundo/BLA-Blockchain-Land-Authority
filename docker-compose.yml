version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: rwalandchain-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: rwalandchain
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - rwalandchain-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rwalandchain"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: rwalandchain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rwalandchain-network
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: rwalandchain-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"     # P2P port
      - "5001:5001"     # API port
      - "8080:8080"     # Gateway port
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - rwalandchain-network
    environment:
      - IPFS_PROFILE=server
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 3

  # The Graph Node (for blockchain indexing)
  graph-node:
    image: graphprotocol/graph-node:latest
    container_name: rwalandchain-graph-node
    restart: unless-stopped
    ports:
      - "8000:8000"     # GraphQL HTTP
      - "8001:8001"     # GraphQL WebSocket
      - "8020:8020"     # JSON-RPC
      - "8030:8030"     # Subgraph indexing status
    depends_on:
      - postgres
      - ipfs
    environment:
      postgres_host: postgres
      postgres_user: postgres
      postgres_pass: postgres
      postgres_db: rwalandchain
      ipfs: 'ipfs:5001'
      ethereum: 'arbitrum-sepolia:${ARBITRUM_SEPOLIA_RPC_URL:-https://sepolia-rollup.arbitrum.io/rpc}'
      GRAPH_LOG: info
      RUST_LOG: info
    networks:
      - rwalandchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rwalandchain-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - ipfs
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: rwalandchain
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      IPFS_HOST: ipfs
      IPFS_PORT: 5001
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    networks:
      - rwalandchain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rwalandchain-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - rwalandchain-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local

networks:
  rwalandchain-network:
    driver: bridge

